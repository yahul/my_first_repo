https://medium.com/faun/integrating-prometheus-and-grafana-on-kubernetes-and-making-their-data-persistent-96f834979f5f


<<prometheus.yaml>>

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"prometheus","chart":"prometheus-11.7.0","component":"server","heritage":"Helm","release":"prometheus"},"name":"prometheus","namespace":"istio-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"prometheus","component":"server","release":"prometheus"}},"template":{"metadata":{"labels":{"app":"prometheus","chart":"prometheus-11.7.0","component":"server","heritage":"Helm","release":"prometheus"}},"spec":{"containers":[{"args":["--volume-dir=/etc/config","--webhook-url=http://127.0.0.1:9090/-/reload"],"image":"jimmidyson/configmap-reload:v0.3.0","imagePullPolicy":"IfNotPresent","name":"prometheus-server-configmap-reload","resources":{},"volumeMounts":[{"mountPath":"/etc/config","name":"config-volume","readOnly":true}]},{"args":["--storage.tsdb.retention.time=15d","--config.file=/etc/config/prometheus.yml","--storage.tsdb.path=/data","--web.console.libraries=/etc/prometheus/console_libraries","--web.console.templates=/etc/prometheus/consoles","--web.enable-lifecycle"],"image":"prom/prometheus:v2.19.0","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/healthy","port":9090},"initialDelaySeconds":30,"periodSeconds":15,"successThreshold":1,"timeoutSeconds":30},"name":"prometheus-server","ports":[{"containerPort":9090}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/-/ready","port":9090},"initialDelaySeconds":0,"periodSeconds":5,"successThreshold":1,"timeoutSeconds":30},"resources":{},"volumeMounts":[{"mountPath":"/etc/config","name":"config-volume"},{"mountPath":"/data","name":"storage-volume","subPath":""}]}],"securityContext":{"fsGroup":65534,"runAsGroup":65534,"runAsNonRoot":true,"runAsUser":65534},"serviceAccountName":"prometheus","terminationGracePeriodSeconds":300,"volumes":[{"configMap":{"name":"prometheus"},"name":"config-volume"},{"emptyDir":{},"name":"storage-volume"}]}}}}
  creationTimestamp: "2020-11-06T11:43:50Z"
  generation: 1
  labels:
    app: prometheus
    chart: prometheus-11.7.0
    component: server
    heritage: Helm
    release: prometheus
  name: prometheus
  namespace: istio-system
  resourceVersion: "756191"
  selfLink: /apis/apps/v1/namespaces/istio-system/deployments/prometheus
  uid: 9372f97c-a660-4ba1-bada-f0ab245750c7
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: prometheus
      component: server
      release: prometheus
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: prometheus
        chart: prometheus-11.7.0
        component: server
        heritage: Helm
        release: prometheus
    spec:
      containers:
      - args:
        - --volume-dir=/etc/config
        - --webhook-url=http://127.0.0.1:9090/-/reload
        image: jimmidyson/configmap-reload:v0.3.0
        imagePullPolicy: IfNotPresent
        name: prometheus-server-configmap-reload
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
          readOnly: true
      - args:
        - --storage.tsdb.retention.time=15d
        - --config.file=/etc/config/prometheus.yml
        - --storage.tsdb.path=/data
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        image: prom/prometheus:v2.19.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/healthy
            port: 9090
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 30
        name: prometheus-server
        ports:
        - containerPort: 9090
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /-/ready
            port: 9090
            scheme: HTTP
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 30
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
        - mountPath: /data
          name: storage-volume
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccount: prometheus
      serviceAccountName: prometheus
      terminationGracePeriodSeconds: 300
      volumes:
      - configMap:
          defaultMode: 420
          name: prometheus
        name: config-volume
      - emptyDir: {}
        name: storage-volume
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2020-11-06T11:43:56Z"
    lastUpdateTime: "2020-11-06T11:43:56Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2020-11-06T11:43:50Z"
    lastUpdateTime: "2020-11-06T11:43:56Z"
    message: ReplicaSet "prometheus-788c945c9c" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1

================================================================================================


---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pvc-prom-grafana-0
spec:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 10Gi
  cinder:
    fsType: ext3
    volumeID: b98a2233-a12c-4835-8db7-9f7371495a21
  storageClassName: grafana
===================================================================================

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prom-grafana
  namespace: prom
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: grafana
  volumeMode: Filesystem
  volumeName: pvc-prom-grafana-0
status:
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 10Gi

======================================================





 volumeMounts:
          - name: grafana-storage
            mountPath: /var/lib/grafana
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
===========================================================
<<grafana.yaml>>



apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"grafana","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"grafana","app.kubernetes.io/version":"7.0.5","helm.sh/chart":"grafana-5.3.5"},"name":"grafana","namespace":"istio-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"grafana","app.kubernetes.io/name":"grafana"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"checksum/config":"fe7e580c8af3062a70a8dfda740e0ae1daa655c20dd5b94e78bdd09a79b9b5cb","checksum/dashboards-json-config":"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b","checksum/sc-dashboard-provider-config":"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"},"labels":{"app":"grafana","app.kubernetes.io/instance":"grafana","app.kubernetes.io/name":"grafana"}},"spec":{"containers":[{"env":[{"name":"GF_AUTH_ANONYMOUS_ENABLED","value":"true"},{"name":"GF_AUTH_ANONYMOUS_ORG_ROLE","value":"Admin"},{"name":"GF_AUTH_BASIC_ENABLED","value":"false"},{"name":"GF_SECURITY_ADMIN_PASSWORD","value":"-"},{"name":"GF_SECURITY_ADMIN_USER","value":"-"}],"image":"grafana/grafana:7.0.5","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":10,"httpGet":{"path":"/api/health","port":3000},"initialDelaySeconds":60,"timeoutSeconds":30},"name":"grafana","ports":[{"containerPort":3000,"name":"service","protocol":"TCP"},{"containerPort":3000,"name":"grafana","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/api/health","port":3000}},"resources":{},"volumeMounts":[{"mountPath":"/etc/grafana/grafana.ini","name":"config","subPath":"grafana.ini"},{"mountPath":"/var/lib/grafana","name":"storage"},{"mountPath":"/var/lib/grafana/dashboards/istio","name":"dashboards-istio"},{"mountPath":"/var/lib/grafana/dashboards/istio-services","name":"dashboards-istio-services"},{"mountPath":"/etc/grafana/provisioning/datasources/datasources.yaml","name":"config","subPath":"datasources.yaml"},{"mountPath":"/etc/grafana/provisioning/dashboards/dashboardproviders.yaml","name":"config","subPath":"dashboardproviders.yaml"}]}],"securityContext":{"fsGroup":472,"runAsGroup":472,"runAsUser":472},"serviceAccountName":"grafana","volumes":[{"configMap":{"name":"grafana"},"name":"config"},{"configMap":{"name":"istio-grafana-dashboards"},"name":"dashboards-istio"},{"configMap":{"name":"istio-services-grafana-dashboards"},"name":"dashboards-istio-services"},{"emptyDir":{},"name":"storage"}]}}}}
  creationTimestamp: "2020-11-06T11:43:47Z"
  generation: 1
  labels:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 7.0.5
    helm.sh/chart: grafana-5.3.5
  name: grafana
  namespace: istio-system
  resourceVersion: "756208"
  selfLink: /apis/apps/v1/namespaces/istio-system/deployments/grafana
  uid: 41dfb5b5-117e-41dc-bb18-3cfeb9fc0c4d
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: fe7e580c8af3062a70a8dfda740e0ae1daa655c20dd5b94e78bdd09a79b9b5cb
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      creationTimestamp: null
      labels:
        app: grafana
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/name: grafana
    spec:
      containers:
      - env:
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: '-'
        - name: GF_SECURITY_ADMIN_USER
          value: '-'
        image: grafana/grafana:7.0.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: service
          protocol: TCP
        - containerPort: 3000
          name: grafana
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /var/lib/grafana
          name: storage
        - mountPath: /var/lib/grafana/dashboards/istio
          name: dashboards-istio
        - mountPath: /var/lib/grafana/dashboards/istio-services
          name: dashboards-istio-services
        - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          name: config
          subPath: datasources.yaml
        - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
          name: config
          subPath: dashboardproviders.yaml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      serviceAccount: grafana
      serviceAccountName: grafana
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: grafana
        name: config
      - configMap:
          defaultMode: 420
          name: istio-grafana-dashboards
        name: dashboards-istio
      - configMap:
          defaultMode: 420
          name: istio-services-grafana-dashboards
        name: dashboards-istio-services
      - emptyDir: {}
        name: storage
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2020-11-06T11:43:57Z"
    lastUpdateTime: "2020-11-06T11:43:57Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2020-11-06T11:43:47Z"
    lastUpdateTime: "2020-11-06T11:43:57Z"
    message: ReplicaSet "grafana-767c5487d6" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1

=================================================================


prom-pv.yml for making PV for Prometheus

>>
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-prometheus
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/sda1/data/prometheus"
<<

grafana-pv.yml for PV creation for Grafana:

>>
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-grafana
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/sda1/data/grafana"

<<


2. Now making PVCs:
For Prometheus prom-pvc.yml

>>
apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
  name: prom-pvc
  labels:
      name: prometheus
spec:  
  storageClassName: manual  
  accessModes:
   - ReadWriteOnce
  resources:
   requests:   
     storage: 1Gi
<<


For Grafana grafana-pvc.yml
>>
apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
   name: grafana-pvc
   labels:
     name: grafana
spec:    
   storageClassName: manual
   accessModes:
    - ReadWriteOnce
   resources:
    requests:   
      storage: 1Gi
<<
=================================
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-grafana
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
==================================
nano my-pv.yaml

apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-pv
spec:
  storageClassName: standard
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"

kubectl create -f pv-grafana.yaml
====================
apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
   name: grafana-pvc
   namespace: istio-system
   labels:
     app: grafana
spec:    
   storageClassName: standard
   accessModes:
    - ReadWriteOnce
   resources:
    requests:   
      storage: 2Gi
==========================
nano my-pvc.yaml


apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
   name: my-pv
   labels:
     name: grafana
spec:    
   storageClassName: local-storage
   accessModes:
    - ReadWriteOnce
   resources:
    requests:   
      storage: 512Mi

kubectl create -f pvc-grafana.yaml
============

kubectl get pv

nano my-pvc-pod.yaml
====
apiVersion: v1
kind: Pod
metadata:
   name: my-pvc-pod
spec:
  containers:
  - name: busybox
    image: busybox
    command: ["/bin/sh", "-e", "while true; do sleep 3600; done"]
    volumeMounts:
    - mountPath: "/mnt/storage"
      name: my-storage    
  volumes:
  - name: my-storage
    persistentVolumeClaim:
      claimNmae: my-pvc



kubectl create -f my-pvc-pod.yaml


kubectl delete pv [pv-name]


storageClassName: standard
 ======
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: istio-grafana-pvc
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "grafana.name" . }}
    chart: {{ template "grafana.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  storageClassName: {{ .Values.storageClassName }}
  accessModes:
    - {{ .Values.accessMode }}
  resources:
    requests:
      storage: 5Gi
{{- end }}
===
95- 98
 volumes: 
          - name: grafana-volume
            persistentVolumeClaim:
              claimName: grafana-pvc
===

curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.7.4 sh -

132 -  - emptyDir: {}
===========================

apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app.kubernetes.io/instance":"grafana","app.kubernetes.io/managed-by":"Helm","app.kubernetes.io/name":"grafana","app.kubernetes.io/version":"7.0.5","helm.sh/chart":"grafana-5.3.5"},"name":"grafana","namespace":"istio-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app.kubernetes.io/instance":"grafana","app.kubernetes.io/name":"grafana"}},"strategy":{"type":"RollingUpdate"},"template":{"metadata":{"annotations":{"checksum/config":"fe7e580c8af3062a70a8dfda740e0ae1daa655c20dd5b94e78bdd09a79b9b5cb","checksum/dashboards-json-config":"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b","checksum/sc-dashboard-provider-config":"01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b"},"labels":{"app":"grafana","app.kubernetes.io/instance":"grafana","app.kubernetes.io/name":"grafana"}},"spec":{"containers":[{"env":[{"name":"GF_AUTH_ANONYMOUS_ENABLED","value":"true"},{"name":"GF_AUTH_ANONYMOUS_ORG_ROLE","value":"Admin"},{"name":"GF_AUTH_BASIC_ENABLED","value":"false"},{"name":"GF_SECURITY_ADMIN_PASSWORD","value":"-"},{"name":"GF_SECURITY_ADMIN_USER","value":"-"}],"image":"grafana/grafana:7.0.5","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":10,"httpGet":{"path":"/api/health","port":3000},"initialDelaySeconds":60,"timeoutSeconds":30},"name":"grafana","ports":[{"containerPort":3000,"name":"service","protocol":"TCP"},{"containerPort":3000,"name":"grafana","protocol":"TCP"}],"readinessProbe":{"httpGet":{"path":"/api/health","port":3000}},"resources":{},"volumeMounts":[{"mountPath":"/etc/grafana/grafana.ini","name":"config","subPath":"grafana.ini"},{"mountPath":"/var/lib/grafana","name":"storage"},{"mountPath":"/var/lib/grafana/dashboards/istio","name":"dashboards-istio"},{"mountPath":"/var/lib/grafana/dashboards/istio-services","name":"dashboards-istio-services"},{"mountPath":"/etc/grafana/provisioning/datasources/datasources.yaml","name":"config","subPath":"datasources.yaml"},{"mountPath":"/etc/grafana/provisioning/dashboards/dashboardproviders.yaml","name":"config","subPath":"dashboardproviders.yaml"}]}],"securityContext":{"fsGroup":472,"runAsGroup":472,"runAsUser":472},"serviceAccountName":"grafana","volumes":[{"configMap":{"name":"grafana"},"name":"config"},{"configMap":{"name":"istio-grafana-dashboards"},"name":"dashboards-istio"},{"configMap":{"name":"istio-services-grafana-dashboards"},"name":"dashboards-istio-services"},{"emptyDir":{},"name":"storage"}]}}}}
  creationTimestamp: "2020-11-06T11:43:47Z"
  generation: 5
  labels:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 7.0.5
    helm.sh/chart: grafana-5.3.5
  name: grafana
  namespace: istio-system
  resourceVersion: "2536593"
  selfLink: /apis/apps/v1/namespaces/istio-system/deployments/grafana
  uid: 41dfb5b5-117e-41dc-bb18-3cfeb9fc0c4d
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/name: grafana
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: fe7e580c8af3062a70a8dfda740e0ae1daa655c20dd5b94e78bdd09a79b9b5cb
        checksum/dashboards-json-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      creationTimestamp: null
      labels:
        app: grafana
        app.kubernetes.io/instance: grafana
        app.kubernetes.io/name: grafana
    spec:
      containers:
      - env:
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: Admin
        - name: GF_AUTH_BASIC_ENABLED
          value: "false"
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: '-'
        - name: GF_SECURITY_ADMIN_USER
          value: '-'
        image: grafana/grafana:7.0.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 30
        name: grafana
        ports:
        - containerPort: 3000
          name: service
          protocol: TCP
        - containerPort: 3000
          name: grafana
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/health
            port: 3000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/grafana/grafana.ini
          name: config
          subPath: grafana.ini
        - mountPath: /var/lib/grafana
        volumes: 
        - name: grafana-volume
          persistentVolumeClaim:
           claimName: grafana-pvc
        - mountPath: /var/lib/grafana/dashboards/istio
          name: dashboards-istio
        - mountPath: /var/lib/grafana/dashboards/istio-services
          name: dashboards-istio-services
        - mountPath: /etc/grafana/provisioning/datasources/datasources.yaml
          name: config
          subPath: datasources.yaml
        - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
          name: config
          subPath: dashboardproviders.yaml
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 472
        runAsGroup: 472
        runAsUser: 472
      serviceAccount: grafana
      serviceAccountName: grafana
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: grafana
        name: config
      - configMap:
          defaultMode: 420
          name: istio-grafana-dashboards
        name: dashboards-istio
      - configMap:
          defaultMode: 420
          name: istio-services-grafana-dashboards
        name: dashboards-istio-services
      - emptyDir: {}
        name: storage
status:
  availableReplicas: 1
  conditions:
  - lastTransitionTime: "2020-11-06T11:43:47Z"
    lastUpdateTime: "2020-11-06T11:43:57Z"
    message: ReplicaSet "grafana-767c5487d6" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  - lastTransitionTime: "2020-11-09T11:52:40Z"
    lastUpdateTime: "2020-11-09T11:52:40Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 5
  readyReplicas: 1
  replicas: 1
  updatedReplicas: 1
=================================
129-132
   - name: grafana-volume
        persistentVolumeClaim:
          claimName: grafana-pvc
      - emptyDir: {}

=======================
pv

apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-grafana
  namespace: istio-system
  labels:
    app: grafana
spec:
  storageClassName: standard
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"

=============+++++++++++++
pvc

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
   name: grafana-pvc
   namespace: istio-system
   labels:
     app: grafana
spec:
   storageClassName: standard
   accessModes:
    - ReadWriteOnce
   resources:
    requests:
      storage: 1Gi
+++++++++++++++++++++++
grafana.yaml
60-66

volumeMounts:
      - mountPath: "/opt"
        name: grafana
  volumes:
    - name: grafana
      persistentVolumeClaim:
        claimName: grafana-pvc








